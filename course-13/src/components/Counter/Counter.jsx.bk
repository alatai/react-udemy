import { useState, useCallback, useMemo } from 'react'

import IconButton from '../UI/IconButton.jsx'
import MinusIcon from '../UI/Icons/MinusIcon.jsx'
import PlusIcon from '../UI/Icons/PlusIcon.jsx'
import CounterOutput from './CounterOutput.jsx'
import { log } from '../../log.js'

const isPrime = (number) => {
  log('Calculating if is prime number', 2, 'other')
  if (number <= 1) {
    return false
  }

  const limit = Math.sqrt(number)

  for (let i = 2; i <= limit; i++) {
    if (number % i === 0) {
      return false
    }
  }

  return true
}

const Counter = ({ initialCount }) => {
  log('<Counter /> rendered', 1)

  // useMemo阻止在组件函数内部调用的普通函数的执行
  // 不应该把它包装在所有函数上（与memo一样，需要执行额外的依赖值比较）
  // 执行可能需要一些时间才能完成的代码，使用useMemo更有意义
  const initialCountIsPrime = useMemo(() => {
    isPrime(initialCount)
    // 需要一个依赖数组，就像useCallback一样
    // 只有在依赖项改变时重新执行这个函数
  }, [initialCount])

  const [counter, setCounter] = useState(initialCount)

  // 这些都是嵌套函数，实际上每次执行计数器组件函数时，它们都将在技术上重新创建
  // 它将是内存中的一个不同的对象，与执行计数器组件函数时不同
  // React提供一个特殊钩子useCallback，可以防止这种重新创建
  // 1.如果有一个函数作为useEffect的依赖项
  // 2.它可能还需要与备忘录结合使用，避免不必要的重复执行
  const handleDecrement = useCallback(() => {
    setCounter((prevCounter) => prevCounter - 1)
    // 第二个参数向useCallback传递一个依赖数组（这样最新的值才能用在函数中）
  }, [])

  const handleIncrement = useCallback(() => {
    setCounter((prevCounter) => prevCounter + 1)
  }, [])

  return (
    <section className="counter">
      <p className="counter-info">
        The initial counter value was <strong>{initialCount}</strong>. It{' '}
        <strong>is {initialCountIsPrime ? 'a' : 'not a'}</strong> prime number.
      </p>
      <p>
        <IconButton icon={MinusIcon} onClick={handleDecrement}>
          Decrement
        </IconButton>
        <CounterOutput value={counter} />
        <IconButton icon={PlusIcon} onClick={handleIncrement}>
          Increment
        </IconButton>
      </p>
    </section>
  )
}

export default Counter
